
    [TestMethod]
    public async Task player_playerId()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.playerId", 0xD47B, [39, 94], 10078);
    }

    [TestMethod]
    public async Task player_name()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.name", 0xD47D, [128, 139, 139, 128, 141, 80, 80, 80, 80, 80, 80], "ALLAN");
    }

    [TestMethod]
    public async Task player_gender()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.gender", 0xD472, [0], "Male");
    }

    [TestMethod]
    public async Task player_teamCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.teamCount", 0xDCD7, [1], 1);
    }

    [TestMethod]
    public async Task player_team_0_nickname()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.nickname", 0xDE41, [141], "N");
    }

    [TestMethod]
    public async Task player_team_0_species()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.species", 0xDCDF, [158], "Totodile");
    }

    [TestMethod]
    public async Task player_team_0_pokedexNumber()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.pokedexNumber", 0xDCDF, [158], "158");
    }

    [TestMethod]
    public async Task player_team_0_level()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.level", 0xDCFE, [5], 5);
    }

    [TestMethod]
    public async Task player_team_0_expPoints()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.expPoints", 0xDCE7, [0, 0, 135], 135);
    }

    [TestMethod]
    public async Task player_team_0_friendship()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.friendship", 0xDCFA, [70], 70);
    }

    [TestMethod]
    public async Task player_team_0_statusCondition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.statusCondition", 0xDCFF, [0], null);
    }

    [TestMethod]
    public async Task player_team_0_heldItem()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.heldItem", 0xDCE0, [173], "Berry");
    }

    [TestMethod]
    public async Task player_team_0_hp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.hp", 0xDD01, [0, 19], 19);
    }

    [TestMethod]
    public async Task player_team_0_maxHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.maxHp", 0xDD03, [0, 21], 21);
    }

    [TestMethod]
    public async Task player_team_0_attack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.attack", 0xDD05, [0, 12], 12);
    }

    [TestMethod]
    public async Task player_team_0_defense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.defense", 0xDD07, [0, 12], 12);
    }

    [TestMethod]
    public async Task player_team_0_specialAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.specialAttack", 0xDD0B, [0, 10], 10);
    }

    [TestMethod]
    public async Task player_team_0_specialDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.specialDefense", 0xDD0D, [0, 10], 10);
    }

    [TestMethod]
    public async Task player_team_0_speed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.speed", 0xDD09, [0, 10], 10);
    }

    [TestMethod]
    public async Task player_team_0_dvAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.dvAttack", 0xDCF4, [187], 11);
    }

    [TestMethod]
    public async Task player_team_0_dvDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.dvDefense", 0xDCF4, [187], 11);
    }

    [TestMethod]
    public async Task player_team_0_dvSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.dvSpeed", 0xDCF5, [155], 9);
    }

    [TestMethod]
    public async Task player_team_0_dvSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.dvSpecial", 0xDCF5, [155], 11);
    }

    [TestMethod]
    public async Task player_team_0_move1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.move1", 0xDCE1, [10], "Scratch");
    }

    [TestMethod]
    public async Task player_team_0_move2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.move2", 0xDCE2, [43], "Leer");
    }

    [TestMethod]
    public async Task player_team_0_move3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.move3", 0xDCE3, [0], null);
    }

    [TestMethod]
    public async Task player_team_0_move4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.move4", 0xDCE4, [0], null);
    }

    [TestMethod]
    public async Task player_team_0_move1pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.move1pp", 0xDCF6, [34], 34);
    }

    [TestMethod]
    public async Task player_team_0_move2pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.move2pp", 0xDCF7, [30], 30);
    }

    [TestMethod]
    public async Task player_team_0_move3pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.move3pp", 0xDCF8, [0], 0);
    }

    [TestMethod]
    public async Task player_team_0_move4pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.move4pp", 0xDCF9, [0], 0);
    }

    [TestMethod]
    public async Task player_team_0_move1ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.move1ppUp", 0xDCF6, [34], 0);
    }

    [TestMethod]
    public async Task player_team_0_move2ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.move2ppUp", 0xDCF7, [30], 0);
    }

    [TestMethod]
    public async Task player_team_0_move3ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.move3ppUp", 0xDCF8, [0], 0);
    }

    [TestMethod]
    public async Task player_team_0_move4ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.move4ppUp", 0xDCF9, [0], 0);
    }

    [TestMethod]
    public async Task player_team_0_statExpHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.statExpHp", 0xDCEA, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_0_statExpAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.statExpAttack", 0xDCEC, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_0_statExpDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.statExpDefense", 0xDCEE, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_0_statExpSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.statExpSpeed", 0xDCF0, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_0_statExpSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.statExpSpecial", 0xDCF2, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_0_pokerus()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.pokerus", 0xDCFB, [0], 0);
    }

    [TestMethod]
    public async Task player_team_0_trainerId()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.0.trainerId", 0xDCE5, [39, 94], 10078);
    }

    [TestMethod]
    public async Task player_team_1_nickname()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.nickname", 0xDE4C, [0], " ");
    }

    [TestMethod]
    public async Task player_team_1_species()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.species", 0xDD0F, [0], null);
    }

    [TestMethod]
    public async Task player_team_1_pokedexNumber()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.pokedexNumber", 0xDD0F, [0], null);
    }

    [TestMethod]
    public async Task player_team_1_level()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.level", 0xDD2E, [0], 0);
    }

    [TestMethod]
    public async Task player_team_1_expPoints()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.expPoints", 0xDD17, [0, 0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_1_friendship()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.friendship", 0xDD2A, [0], 0);
    }

    [TestMethod]
    public async Task player_team_1_statusCondition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.statusCondition", 0xDD2F, [0], null);
    }

    [TestMethod]
    public async Task player_team_1_heldItem()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.heldItem", 0xDD10, [0], null);
    }

    [TestMethod]
    public async Task player_team_1_hp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.hp", 0xDD31, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_1_maxHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.maxHp", 0xDD33, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_1_attack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.attack", 0xDD35, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_1_defense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.defense", 0xDD37, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_1_specialAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.specialAttack", 0xDD3B, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_1_specialDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.specialDefense", 0xDD3D, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_1_speed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.speed", 0xDD39, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_1_dvAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.dvAttack", 0xDD24, [0], 0);
    }

    [TestMethod]
    public async Task player_team_1_dvDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.dvDefense", 0xDD24, [0], 0);
    }

    [TestMethod]
    public async Task player_team_1_dvSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.dvSpeed", 0xDD25, [0], 0);
    }

    [TestMethod]
    public async Task player_team_1_dvSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.dvSpecial", 0xDD25, [0], 0);
    }

    [TestMethod]
    public async Task player_team_1_move1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.move1", 0xDD11, [0], null);
    }

    [TestMethod]
    public async Task player_team_1_move2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.move2", 0xDD12, [0], null);
    }

    [TestMethod]
    public async Task player_team_1_move3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.move3", 0xDD13, [0], null);
    }

    [TestMethod]
    public async Task player_team_1_move4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.move4", 0xDD14, [0], null);
    }

    [TestMethod]
    public async Task player_team_1_move1pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.move1pp", 0xDD26, [0], 0);
    }

    [TestMethod]
    public async Task player_team_1_move2pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.move2pp", 0xDD27, [0], 0);
    }

    [TestMethod]
    public async Task player_team_1_move3pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.move3pp", 0xDD28, [0], 0);
    }

    [TestMethod]
    public async Task player_team_1_move4pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.move4pp", 0xDD29, [0], 0);
    }

    [TestMethod]
    public async Task player_team_1_move1ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.move1ppUp", 0xDD26, [0], 0);
    }

    [TestMethod]
    public async Task player_team_1_move2ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.move2ppUp", 0xDD27, [0], 0);
    }

    [TestMethod]
    public async Task player_team_1_move3ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.move3ppUp", 0xDD28, [0], 0);
    }

    [TestMethod]
    public async Task player_team_1_move4ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.move4ppUp", 0xDD29, [0], 0);
    }

    [TestMethod]
    public async Task player_team_1_statExpHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.statExpHp", 0xDD1A, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_1_statExpAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.statExpAttack", 0xDD1C, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_1_statExpDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.statExpDefense", 0xDD1E, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_1_statExpSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.statExpSpeed", 0xDD20, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_1_statExpSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.statExpSpecial", 0xDD22, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_1_pokerus()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.pokerus", 0xDD2B, [0], 0);
    }

    [TestMethod]
    public async Task player_team_1_trainerId()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.1.trainerId", 0xDD15, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_2_nickname()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.nickname", 0xDE57, [0], " ");
    }

    [TestMethod]
    public async Task player_team_2_species()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.species", 0xDD3F, [0], null);
    }

    [TestMethod]
    public async Task player_team_2_pokedexNumber()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.pokedexNumber", 0xDD3F, [0], null);
    }

    [TestMethod]
    public async Task player_team_2_level()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.level", 0xDD5E, [0], 0);
    }

    [TestMethod]
    public async Task player_team_2_expPoints()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.expPoints", 0xDD47, [0, 0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_2_friendship()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.friendship", 0xDD5A, [0], 0);
    }

    [TestMethod]
    public async Task player_team_2_statusCondition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.statusCondition", 0xDD5F, [0], null);
    }

    [TestMethod]
    public async Task player_team_2_heldItem()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.heldItem", 0xDD40, [0], null);
    }

    [TestMethod]
    public async Task player_team_2_hp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.hp", 0xDD61, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_2_maxHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.maxHp", 0xDD63, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_2_attack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.attack", 0xDD65, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_2_defense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.defense", 0xDD67, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_2_specialAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.specialAttack", 0xDD6B, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_2_specialDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.specialDefense", 0xDD6D, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_2_speed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.speed", 0xDD69, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_2_dvAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.dvAttack", 0xDD54, [0], 0);
    }

    [TestMethod]
    public async Task player_team_2_dvDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.dvDefense", 0xDD54, [0], 0);
    }

    [TestMethod]
    public async Task player_team_2_dvSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.dvSpeed", 0xDD55, [0], 0);
    }

    [TestMethod]
    public async Task player_team_2_dvSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.dvSpecial", 0xDD55, [0], 0);
    }

    [TestMethod]
    public async Task player_team_2_move1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.move1", 0xDD41, [0], null);
    }

    [TestMethod]
    public async Task player_team_2_move2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.move2", 0xDD42, [0], null);
    }

    [TestMethod]
    public async Task player_team_2_move3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.move3", 0xDD43, [0], null);
    }

    [TestMethod]
    public async Task player_team_2_move4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.move4", 0xDD44, [0], null);
    }

    [TestMethod]
    public async Task player_team_2_move1pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.move1pp", 0xDD56, [0], 0);
    }

    [TestMethod]
    public async Task player_team_2_move2pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.move2pp", 0xDD57, [0], 0);
    }

    [TestMethod]
    public async Task player_team_2_move3pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.move3pp", 0xDD58, [0], 0);
    }

    [TestMethod]
    public async Task player_team_2_move4pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.move4pp", 0xDD59, [0], 0);
    }

    [TestMethod]
    public async Task player_team_2_move1ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.move1ppUp", 0xDD56, [0], 0);
    }

    [TestMethod]
    public async Task player_team_2_move2ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.move2ppUp", 0xDD57, [0], 0);
    }

    [TestMethod]
    public async Task player_team_2_move3ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.move3ppUp", 0xDD58, [0], 0);
    }

    [TestMethod]
    public async Task player_team_2_move4ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.move4ppUp", 0xDD59, [0], 0);
    }

    [TestMethod]
    public async Task player_team_2_statExpHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.statExpHp", 0xDD4A, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_2_statExpAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.statExpAttack", 0xDD4C, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_2_statExpDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.statExpDefense", 0xDD4E, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_2_statExpSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.statExpSpeed", 0xDD50, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_2_statExpSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.statExpSpecial", 0xDD52, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_2_pokerus()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.pokerus", 0xDD5B, [0], 0);
    }

    [TestMethod]
    public async Task player_team_2_trainerId()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.2.trainerId", 0xDD45, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_3_nickname()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.nickname", 0xDE62, [0], " ");
    }

    [TestMethod]
    public async Task player_team_3_species()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.species", 0xDD6F, [0], null);
    }

    [TestMethod]
    public async Task player_team_3_pokedexNumber()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.pokedexNumber", 0xDD6F, [0], null);
    }

    [TestMethod]
    public async Task player_team_3_level()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.level", 0xDD8E, [0], 0);
    }

    [TestMethod]
    public async Task player_team_3_expPoints()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.expPoints", 0xDD77, [0, 0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_3_friendship()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.friendship", 0xDD8A, [0], 0);
    }

    [TestMethod]
    public async Task player_team_3_statusCondition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.statusCondition", 0xDD8F, [0], null);
    }

    [TestMethod]
    public async Task player_team_3_heldItem()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.heldItem", 0xDD70, [0], null);
    }

    [TestMethod]
    public async Task player_team_3_hp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.hp", 0xDD91, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_3_maxHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.maxHp", 0xDD93, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_3_attack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.attack", 0xDD95, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_3_defense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.defense", 0xDD97, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_3_specialAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.specialAttack", 0xDD9B, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_3_specialDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.specialDefense", 0xDD9D, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_3_speed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.speed", 0xDD99, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_3_dvAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.dvAttack", 0xDD84, [0], 0);
    }

    [TestMethod]
    public async Task player_team_3_dvDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.dvDefense", 0xDD84, [0], 0);
    }

    [TestMethod]
    public async Task player_team_3_dvSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.dvSpeed", 0xDD85, [0], 0);
    }

    [TestMethod]
    public async Task player_team_3_dvSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.dvSpecial", 0xDD85, [0], 0);
    }

    [TestMethod]
    public async Task player_team_3_move1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.move1", 0xDD71, [0], null);
    }

    [TestMethod]
    public async Task player_team_3_move2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.move2", 0xDD72, [0], null);
    }

    [TestMethod]
    public async Task player_team_3_move3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.move3", 0xDD73, [0], null);
    }

    [TestMethod]
    public async Task player_team_3_move4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.move4", 0xDD74, [0], null);
    }

    [TestMethod]
    public async Task player_team_3_move1pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.move1pp", 0xDD86, [0], 0);
    }

    [TestMethod]
    public async Task player_team_3_move2pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.move2pp", 0xDD87, [0], 0);
    }

    [TestMethod]
    public async Task player_team_3_move3pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.move3pp", 0xDD88, [0], 0);
    }

    [TestMethod]
    public async Task player_team_3_move4pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.move4pp", 0xDD89, [0], 0);
    }

    [TestMethod]
    public async Task player_team_3_move1ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.move1ppUp", 0xDD86, [0], 0);
    }

    [TestMethod]
    public async Task player_team_3_move2ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.move2ppUp", 0xDD87, [0], 0);
    }

    [TestMethod]
    public async Task player_team_3_move3ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.move3ppUp", 0xDD88, [0], 0);
    }

    [TestMethod]
    public async Task player_team_3_move4ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.move4ppUp", 0xDD89, [0], 0);
    }

    [TestMethod]
    public async Task player_team_3_statExpHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.statExpHp", 0xDD7A, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_3_statExpAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.statExpAttack", 0xDD7C, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_3_statExpDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.statExpDefense", 0xDD7E, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_3_statExpSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.statExpSpeed", 0xDD80, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_3_statExpSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.statExpSpecial", 0xDD82, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_3_pokerus()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.pokerus", 0xDD8B, [0], 0);
    }

    [TestMethod]
    public async Task player_team_3_trainerId()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.3.trainerId", 0xDD75, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_4_nickname()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.nickname", 0xDE6D, [0], " ");
    }

    [TestMethod]
    public async Task player_team_4_species()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.species", 0xDD9F, [0], null);
    }

    [TestMethod]
    public async Task player_team_4_pokedexNumber()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.pokedexNumber", 0xDD9F, [0], null);
    }

    [TestMethod]
    public async Task player_team_4_level()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.level", 0xDDBE, [0], 0);
    }

    [TestMethod]
    public async Task player_team_4_expPoints()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.expPoints", 0xDDA7, [0, 0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_4_friendship()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.friendship", 0xDDBA, [0], 0);
    }

    [TestMethod]
    public async Task player_team_4_statusCondition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.statusCondition", 0xDDBF, [0], null);
    }

    [TestMethod]
    public async Task player_team_4_heldItem()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.heldItem", 0xDDA0, [0], null);
    }

    [TestMethod]
    public async Task player_team_4_hp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.hp", 0xDDC1, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_4_maxHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.maxHp", 0xDDC3, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_4_attack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.attack", 0xDDC5, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_4_defense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.defense", 0xDDC7, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_4_specialAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.specialAttack", 0xDDCB, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_4_specialDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.specialDefense", 0xDDCD, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_4_speed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.speed", 0xDDC9, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_4_dvAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.dvAttack", 0xDDB4, [0], 0);
    }

    [TestMethod]
    public async Task player_team_4_dvDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.dvDefense", 0xDDB4, [0], 0);
    }

    [TestMethod]
    public async Task player_team_4_dvSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.dvSpeed", 0xDDB5, [0], 0);
    }

    [TestMethod]
    public async Task player_team_4_dvSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.dvSpecial", 0xDDB5, [0], 0);
    }

    [TestMethod]
    public async Task player_team_4_move1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.move1", 0xDDA1, [0], null);
    }

    [TestMethod]
    public async Task player_team_4_move2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.move2", 0xDDA2, [0], null);
    }

    [TestMethod]
    public async Task player_team_4_move3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.move3", 0xDDA3, [0], null);
    }

    [TestMethod]
    public async Task player_team_4_move4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.move4", 0xDDA4, [0], null);
    }

    [TestMethod]
    public async Task player_team_4_move1pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.move1pp", 0xDDB6, [0], 0);
    }

    [TestMethod]
    public async Task player_team_4_move2pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.move2pp", 0xDDB7, [0], 0);
    }

    [TestMethod]
    public async Task player_team_4_move3pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.move3pp", 0xDDB8, [0], 0);
    }

    [TestMethod]
    public async Task player_team_4_move4pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.move4pp", 0xDDB9, [0], 0);
    }

    [TestMethod]
    public async Task player_team_4_move1ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.move1ppUp", 0xDDB6, [0], 0);
    }

    [TestMethod]
    public async Task player_team_4_move2ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.move2ppUp", 0xDDB7, [0], 0);
    }

    [TestMethod]
    public async Task player_team_4_move3ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.move3ppUp", 0xDDB8, [0], 0);
    }

    [TestMethod]
    public async Task player_team_4_move4ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.move4ppUp", 0xDDB9, [0], 0);
    }

    [TestMethod]
    public async Task player_team_4_statExpHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.statExpHp", 0xDDAA, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_4_statExpAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.statExpAttack", 0xDDAC, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_4_statExpDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.statExpDefense", 0xDDAE, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_4_statExpSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.statExpSpeed", 0xDDB0, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_4_statExpSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.statExpSpecial", 0xDDB2, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_4_pokerus()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.pokerus", 0xDDBB, [0], 0);
    }

    [TestMethod]
    public async Task player_team_4_trainerId()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.4.trainerId", 0xDDA5, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_5_nickname()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.nickname", 0xDE78, [0], " ");
    }

    [TestMethod]
    public async Task player_team_5_species()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.species", 0xDDCF, [0], null);
    }

    [TestMethod]
    public async Task player_team_5_pokedexNumber()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.pokedexNumber", 0xDDCF, [0], null);
    }

    [TestMethod]
    public async Task player_team_5_level()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.level", 0xDDEE, [0], 0);
    }

    [TestMethod]
    public async Task player_team_5_expPoints()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.expPoints", 0xDDD7, [0, 0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_5_friendship()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.friendship", 0xDDEA, [0], 0);
    }

    [TestMethod]
    public async Task player_team_5_statusCondition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.statusCondition", 0xDDEF, [0], null);
    }

    [TestMethod]
    public async Task player_team_5_heldItem()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.heldItem", 0xDDD0, [0], null);
    }

    [TestMethod]
    public async Task player_team_5_hp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.hp", 0xDDF1, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_5_maxHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.maxHp", 0xDDF3, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_5_attack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.attack", 0xDDF5, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_5_defense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.defense", 0xDDF7, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_5_specialAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.specialAttack", 0xDDFB, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_5_specialDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.specialDefense", 0xDDFD, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_5_speed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.speed", 0xDDF9, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_5_dvAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.dvAttack", 0xDDE4, [0], 0);
    }

    [TestMethod]
    public async Task player_team_5_dvDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.dvDefense", 0xDDE4, [0], 0);
    }

    [TestMethod]
    public async Task player_team_5_dvSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.dvSpeed", 0xDDE5, [0], 0);
    }

    [TestMethod]
    public async Task player_team_5_dvSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.dvSpecial", 0xDDE5, [0], 0);
    }

    [TestMethod]
    public async Task player_team_5_move1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.move1", 0xDDD1, [0], null);
    }

    [TestMethod]
    public async Task player_team_5_move2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.move2", 0xDDD2, [0], null);
    }

    [TestMethod]
    public async Task player_team_5_move3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.move3", 0xDDD3, [0], null);
    }

    [TestMethod]
    public async Task player_team_5_move4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.move4", 0xDDD4, [0], null);
    }

    [TestMethod]
    public async Task player_team_5_move1pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.move1pp", 0xDDE6, [0], 0);
    }

    [TestMethod]
    public async Task player_team_5_move2pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.move2pp", 0xDDE7, [0], 0);
    }

    [TestMethod]
    public async Task player_team_5_move3pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.move3pp", 0xDDE8, [0], 0);
    }

    [TestMethod]
    public async Task player_team_5_move4pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.move4pp", 0xDDE9, [0], 0);
    }

    [TestMethod]
    public async Task player_team_5_move1ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.move1ppUp", 0xDDE6, [0], 0);
    }

    [TestMethod]
    public async Task player_team_5_move2ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.move2ppUp", 0xDDE7, [0], 0);
    }

    [TestMethod]
    public async Task player_team_5_move3ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.move3ppUp", 0xDDE8, [0], 0);
    }

    [TestMethod]
    public async Task player_team_5_move4ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.move4ppUp", 0xDDE9, [0], 0);
    }

    [TestMethod]
    public async Task player_team_5_statExpHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.statExpHp", 0xDDDA, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_5_statExpAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.statExpAttack", 0xDDDC, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_5_statExpDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.statExpDefense", 0xDDDE, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_5_statExpSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.statExpSpeed", 0xDDE0, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_5_statExpSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.statExpSpecial", 0xDDE2, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_team_5_pokerus()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.pokerus", 0xDDEB, [0], 0);
    }

    [TestMethod]
    public async Task player_team_5_trainerId()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.team.5.trainerId", 0xDDD5, [0, 0], 0);
    }

    [TestMethod]
    public async Task player_itemCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.itemCount", 0xD892, [1], 1);
    }

    [TestMethod]
    public async Task player_otNames_0()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.otNames.0", 0xDDFF, [128, 139, 139, 128, 141, 80, 80, 80, 80, 80, 80], "ALLAN");
    }

    [TestMethod]
    public async Task player_otNames_1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.otNames.1", 0xDE0A, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
    }

    [TestMethod]
    public async Task player_otNames_2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.otNames.2", 0xDE15, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
    }

    [TestMethod]
    public async Task player_otNames_3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.otNames.3", 0xDE20, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
    }

    [TestMethod]
    public async Task player_otNames_4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.otNames.4", 0xDE2B, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
    }

    [TestMethod]
    public async Task player_otNames_5()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.otNames.5", 0xDE36, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
    }

    [TestMethod]
    public async Task player_items_0_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.0.item", 0xD893, [18], "Potion");
    }

    [TestMethod]
    public async Task player_items_0_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.0.quantity", 0xD894, [1], 1);
    }

    [TestMethod]
    public async Task player_items_1_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.1.item", 0xD895, [255], "Berry");
    }

    [TestMethod]
    public async Task player_items_1_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.1.quantity", 0xD896, [0], 0);
    }

    [TestMethod]
    public async Task player_items_2_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.2.item", 0xD897, [0], null);
    }

    [TestMethod]
    public async Task player_items_2_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.2.quantity", 0xD898, [0], 0);
    }

    [TestMethod]
    public async Task player_items_3_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.3.item", 0xD899, [0], null);
    }

    [TestMethod]
    public async Task player_items_3_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.3.quantity", 0xD89A, [0], 0);
    }

    [TestMethod]
    public async Task player_items_4_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.4.item", 0xD89B, [0], null);
    }

    [TestMethod]
    public async Task player_items_4_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.4.quantity", 0xD89C, [0], 0);
    }

    [TestMethod]
    public async Task player_items_5_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.5.item", 0xD89D, [0], null);
    }

    [TestMethod]
    public async Task player_items_5_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.5.quantity", 0xD89E, [0], 0);
    }

    [TestMethod]
    public async Task player_items_6_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.6.item", 0xD89F, [0], null);
    }

    [TestMethod]
    public async Task player_items_6_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.6.quantity", 0xD8A0, [0], 0);
    }

    [TestMethod]
    public async Task player_items_7_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.7.item", 0xD8A1, [0], null);
    }

    [TestMethod]
    public async Task player_items_7_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.7.quantity", 0xD8A2, [0], 0);
    }

    [TestMethod]
    public async Task player_items_8_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.8.item", 0xD8A3, [0], null);
    }

    [TestMethod]
    public async Task player_items_8_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.8.quantity", 0xD8A4, [0], 0);
    }

    [TestMethod]
    public async Task player_items_9_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.9.item", 0xD8A5, [0], null);
    }

    [TestMethod]
    public async Task player_items_9_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.9.quantity", 0xD8A6, [0], 0);
    }

    [TestMethod]
    public async Task player_items_10_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.10.item", 0xD8A7, [0], null);
    }

    [TestMethod]
    public async Task player_items_10_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.10.quantity", 0xD8A8, [0], 0);
    }

    [TestMethod]
    public async Task player_items_11_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.11.item", 0xD8A9, [0], null);
    }

    [TestMethod]
    public async Task player_items_11_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.11.quantity", 0xD8AA, [0], 0);
    }

    [TestMethod]
    public async Task player_items_12_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.12.item", 0xD8AB, [0], null);
    }

    [TestMethod]
    public async Task player_items_12_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.12.quantity", 0xD8AC, [0], 0);
    }

    [TestMethod]
    public async Task player_items_13_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.13.item", 0xD8AD, [0], null);
    }

    [TestMethod]
    public async Task player_items_13_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.13.quantity", 0xD8AE, [0], 0);
    }

    [TestMethod]
    public async Task player_items_14_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.14.item", 0xD8AF, [0], null);
    }

    [TestMethod]
    public async Task player_items_14_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.14.quantity", 0xD8B0, [0], 0);
    }

    [TestMethod]
    public async Task player_items_15_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.15.item", 0xD8B1, [0], null);
    }

    [TestMethod]
    public async Task player_items_15_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.15.quantity", 0xD8B2, [0], 0);
    }

    [TestMethod]
    public async Task player_items_16_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.16.item", 0xD8B3, [0], null);
    }

    [TestMethod]
    public async Task player_items_16_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.16.quantity", 0xD8B4, [0], 0);
    }

    [TestMethod]
    public async Task player_items_17_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.17.item", 0xD8B5, [0], null);
    }

    [TestMethod]
    public async Task player_items_17_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.17.quantity", 0xD8B6, [0], 0);
    }

    [TestMethod]
    public async Task player_items_18_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.18.item", 0xD8B7, [0], null);
    }

    [TestMethod]
    public async Task player_items_18_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.18.quantity", 0xD8B8, [0], 0);
    }

    [TestMethod]
    public async Task player_items_19_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.19.item", 0xD8B9, [0], null);
    }

    [TestMethod]
    public async Task player_items_19_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.19.quantity", 0xD8BA, [0], 0);
    }

    [TestMethod]
    public async Task player_items_20_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.20.item", 0xD8BA, [0], null);
    }

    [TestMethod]
    public async Task player_items_20_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.items.20.quantity", 0xD8BB, [0], 0);
    }

    [TestMethod]
    public async Task player_pokeBallCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBallCount", 0xD8D7, [0], 0);
    }

    [TestMethod]
    public async Task player_pokeBalls_0_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.0.item", 0xD8D8, [255], "Berry");
    }

    [TestMethod]
    public async Task player_pokeBalls_0_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.0.quantity", 0xD8D9, [0], 0);
    }

    [TestMethod]
    public async Task player_pokeBalls_1_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.1.item", 0xD8DA, [0], null);
    }

    [TestMethod]
    public async Task player_pokeBalls_1_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.1.quantity", 0xD8DB, [0], 0);
    }

    [TestMethod]
    public async Task player_pokeBalls_2_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.2.item", 0xD8DC, [0], null);
    }

    [TestMethod]
    public async Task player_pokeBalls_2_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.2.quantity", 0xD8DD, [0], 0);
    }

    [TestMethod]
    public async Task player_pokeBalls_3_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.3.item", 0xD8DE, [0], null);
    }

    [TestMethod]
    public async Task player_pokeBalls_3_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.3.quantity", 0xD8DF, [0], 0);
    }

    [TestMethod]
    public async Task player_pokeBalls_4_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.4.item", 0xD8E0, [0], null);
    }

    [TestMethod]
    public async Task player_pokeBalls_4_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.4.quantity", 0xD8E1, [0], 0);
    }

    [TestMethod]
    public async Task player_pokeBalls_5_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.5.item", 0xD8E2, [0], null);
    }

    [TestMethod]
    public async Task player_pokeBalls_5_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.5.quantity", 0xD8E3, [0], 0);
    }

    [TestMethod]
    public async Task player_pokeBalls_6_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.6.item", 0xD8E4, [0], null);
    }

    [TestMethod]
    public async Task player_pokeBalls_6_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.6.quantity", 0xD8E5, [0], 0);
    }

    [TestMethod]
    public async Task player_pokeBalls_7_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.7.item", 0xD8E6, [0], null);
    }

    [TestMethod]
    public async Task player_pokeBalls_7_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.7.quantity", 0xD8E7, [0], 0);
    }

    [TestMethod]
    public async Task player_pokeBalls_8_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.8.item", 0xD8E8, [0], null);
    }

    [TestMethod]
    public async Task player_pokeBalls_8_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.8.quantity", 0xD8E9, [0], 0);
    }

    [TestMethod]
    public async Task player_pokeBalls_9_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.9.item", 0xD8EA, [0], null);
    }

    [TestMethod]
    public async Task player_pokeBalls_9_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.9.quantity", 0xD8EB, [0], 0);
    }

    [TestMethod]
    public async Task player_pokeBalls_10_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.10.item", 0xD8EC, [0], null);
    }

    [TestMethod]
    public async Task player_pokeBalls_10_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.10.quantity", 0xD8ED, [0], 0);
    }

    [TestMethod]
    public async Task player_pokeBalls_11_item()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.11.item", 0xD8ED, [0], null);
    }

    [TestMethod]
    public async Task player_pokeBalls_11_quantity()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokeBalls.11.quantity", 0xD8EE, [0], 0);
    }

    [TestMethod]
    public async Task player_totalKeyItems()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.totalKeyItems", 0xD8BC, [0], 0);
    }

    [TestMethod]
    public async Task player_keyItems_0()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.0", 0xD8BD, [255], "Berry");
    }

    [TestMethod]
    public async Task player_keyItems_1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.1", 0xD8BE, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.2", 0xD8BF, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.3", 0xD8C0, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.4", 0xD8C1, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_5()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.5", 0xD8C2, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_6()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.6", 0xD8C3, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_7()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.7", 0xD8C4, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_8()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.8", 0xD8C5, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_9()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.9", 0xD8C6, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_10()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.10", 0xD8C7, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_11()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.11", 0xD8C8, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_12()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.12", 0xD8C9, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_13()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.13", 0xD8CA, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_14()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.14", 0xD8CB, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_15()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.15", 0xD8CC, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_16()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.16", 0xD8CD, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_17()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.17", 0xD8CE, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_18()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.18", 0xD8CF, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_19()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.19", 0xD8D0, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_20()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.20", 0xD8D1, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_21()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.21", 0xD8D2, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_22()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.22", 0xD8D3, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_23()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.23", 0xD8D4, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_24()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.24", 0xD8D5, [0], null);
    }

    [TestMethod]
    public async Task player_keyItems_25()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.keyItems.25", 0xD8D6, [0], null);
    }

    [TestMethod]
    public async Task player_tms_TM01-DynamicPunch()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM01-DynamicPunch", 0xD859, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM02-Headbutt()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM02-Headbutt", 0xD85A, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM03-Curse()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM03-Curse", 0xD85B, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM04-Rollout()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM04-Rollout", 0xD85C, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM05-Roar()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM05-Roar", 0xD85D, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM06-Toxic()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM06-Toxic", 0xD85E, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM07-Zap Cannon()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM07-Zap Cannon", 0xD85F, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM08-Rock Smash()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM08-Rock Smash", 0xD860, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM09-Psych Up()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM09-Psych Up", 0xD861, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM10-Hidden Power()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM10-Hidden Power", 0xD862, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM11-Sunny Day()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM11-Sunny Day", 0xD863, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM12-Sweet Scent()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM12-Sweet Scent", 0xD864, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM13-Snore()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM13-Snore", 0xD865, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM14-Blizzard()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM14-Blizzard", 0xD866, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM15-Hyper Beam()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM15-Hyper Beam", 0xD867, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM16-Icy Wind()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM16-Icy Wind", 0xD868, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM17-Protect()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM17-Protect", 0xD869, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM18-Rain Dance()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM18-Rain Dance", 0xD86A, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM19-Giga Drain()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM19-Giga Drain", 0xD86B, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM20-Endure()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM20-Endure", 0xD86C, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM21-Frustration()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM21-Frustration", 0xD86D, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM22-SolarBeam()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM22-SolarBeam", 0xD86E, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM23-Iron Tail()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM23-Iron Tail", 0xD86F, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM24-DragonBreath()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM24-DragonBreath", 0xD870, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM25-Thunder()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM25-Thunder", 0xD871, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM26-Earthquake()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM26-Earthquake", 0xD872, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM27-Return()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM27-Return", 0xD873, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM28-Dig()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM28-Dig", 0xD874, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM29-Psychic()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM29-Psychic", 0xD875, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM30-Shadow Ball()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM30-Shadow Ball", 0xD876, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM31-Mud-Slap()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM31-Mud-Slap", 0xD877, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM32-Double Team()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM32-Double Team", 0xD878, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM33-Ice Punch()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM33-Ice Punch", 0xD879, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM34-Swagger()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM34-Swagger", 0xD87A, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM35-Sleep Talk()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM35-Sleep Talk", 0xD87B, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM36-Sludge Bomb()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM36-Sludge Bomb", 0xD87C, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM37-Sandstorm()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM37-Sandstorm", 0xD87D, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM38-Fire Blast()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM38-Fire Blast", 0xD87E, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM39-Swift()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM39-Swift", 0xD87F, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM40-Defense Curl()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM40-Defense Curl", 0xD880, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM41-ThunderPunch()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM41-ThunderPunch", 0xD881, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM42-Dream Eater()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM42-Dream Eater", 0xD882, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM43-Detect()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM43-Detect", 0xD883, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM44-Rest()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM44-Rest", 0xD884, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM45-Attract()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM45-Attract", 0xD885, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM46-Thief()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM46-Thief", 0xD886, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM47-Steel Wing()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM47-Steel Wing", 0xD887, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM48-Fire Punch()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM48-Fire Punch", 0xD888, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM49-Fury Cutter()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM49-Fury Cutter", 0xD889, [0], 0);
    }

    [TestMethod]
    public async Task player_tms_TM50-Nightmare()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.tms.TM50-Nightmare", 0xD88A, [0], 0);
    }

    [TestMethod]
    public async Task player_hms_HM01-Cut()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.hms.HM01-Cut", 0xD88B, [0], false);
    }

    [TestMethod]
    public async Task player_hms_HM02-Fly()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.hms.HM02-Fly", 0xD88C, [0], false);
    }

    [TestMethod]
    public async Task player_hms_HM03-Surf()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.hms.HM03-Surf", 0xD88D, [0], false);
    }

    [TestMethod]
    public async Task player_hms_HM04-Strength()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.hms.HM04-Strength", 0xD88E, [0], false);
    }

    [TestMethod]
    public async Task player_hms_HM05-Flash()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.hms.HM05-Flash", 0xD88F, [0], false);
    }

    [TestMethod]
    public async Task player_hms_HM06-Whirlpool()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.hms.HM06-Whirlpool", 0xD890, [0], false);
    }

    [TestMethod]
    public async Task player_hms_HM07-Waterfall()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.hms.HM07-Waterfall", 0xD891, [0], false);
    }

    [TestMethod]
    public async Task player_badges_badge1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.badges.badge1", 0xD857, [0], false);
    }

    [TestMethod]
    public async Task player_badges_badge2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.badges.badge2", 0xD857, [0], false);
    }

    [TestMethod]
    public async Task player_badges_badge3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.badges.badge3", 0xD857, [0], false);
    }

    [TestMethod]
    public async Task player_badges_badge4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.badges.badge4", 0xD857, [0], false);
    }

    [TestMethod]
    public async Task player_badges_badge5()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.badges.badge5", 0xD857, [0], false);
    }

    [TestMethod]
    public async Task player_badges_badge6()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.badges.badge6", 0xD857, [0], false);
    }

    [TestMethod]
    public async Task player_badges_badge7()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.badges.badge7", 0xD857, [0], false);
    }

    [TestMethod]
    public async Task player_badges_badge8()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.badges.badge8", 0xD857, [0], false);
    }

    [TestMethod]
    public async Task player_badges_badge9()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.badges.badge9", 0xD858, [0], false);
    }

    [TestMethod]
    public async Task player_badges_badge10()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.badges.badge10", 0xD858, [0], false);
    }

    [TestMethod]
    public async Task player_badges_badge11()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.badges.badge11", 0xD858, [0], false);
    }

    [TestMethod]
    public async Task player_badges_badge12()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.badges.badge12", 0xD858, [0], false);
    }

    [TestMethod]
    public async Task player_badges_badge13()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.badges.badge13", 0xD858, [0], false);
    }

    [TestMethod]
    public async Task player_badges_badge14()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.badges.badge14", 0xD858, [0], false);
    }

    [TestMethod]
    public async Task player_badges_badge15()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.badges.badge15", 0xD858, [0], false);
    }

    [TestMethod]
    public async Task player_badges_badge16()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.badges.badge16", 0xD858, [0], false);
    }

    [TestMethod]
    public async Task player_pokegear_mapCard()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokegear.mapCard", 0xD957, [132], false);
    }

    [TestMethod]
    public async Task player_pokegear_radioCard()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokegear.radioCard", 0xD957, [132], false);
    }

    [TestMethod]
    public async Task player_pokegear_phoneCard()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokegear.phoneCard", 0xD957, [132], true);
    }

    [TestMethod]
    public async Task player_pokegear_expansionCard()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokegear.expansionCard", 0xD957, [132], false);
    }

    [TestMethod]
    public async Task player_pokegear_obtained()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.pokegear.obtained", 0xD957, [132], true);
    }

    [TestMethod]
    public async Task player_money()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.money", 0xD84E, [0, 11, 184], 3000);
    }

    [TestMethod]
    public async Task player_moneyMom()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.moneyMom", 0xD851, [0, 0, 0], 0);
    }

    [TestMethod]
    public async Task player_momSaving()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.momSaving", 0xD854, [0], false);
    }

    [TestMethod]
    public async Task player_coins()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("player.coins", 0xD855, [0, 0], 0);
    }

    [TestMethod]
    public async Task overworld_mapGroup()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("overworld.mapGroup", 0xDCB5, [24], "NEW BARK");
    }

    [TestMethod]
    public async Task overworld_mapNumber()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("overworld.mapNumber", 0xDCB6, [3], 3);
    }

    [TestMethod]
    public async Task overworld_y()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("overworld.y", 0xDCB7, [10], 10);
    }

    [TestMethod]
    public async Task overworld_x()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("overworld.x", 0xDCB8, [45], 45);
    }

    [TestMethod]
    public async Task events_beatChampion()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("events.beatChampion", 0xDB29, [0], false);
    }

    [TestMethod]
    public async Task encounterRate_morning()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("encounterRate.morning", 0xD25A, [25], 25);
    }

    [TestMethod]
    public async Task encounterRate_day()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("encounterRate.day", 0xD25B, [25], 25);
    }

    [TestMethod]
    public async Task encounterRate_night()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("encounterRate.night", 0xD25C, [25], 25);
    }

    [TestMethod]
    public async Task encounterRate_water()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("encounterRate.water", 0xD25D, [0], 0);
    }

    [TestMethod]
    public async Task battle_mode()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.mode", 0xD22D, [1], "Wild");
    }

    [TestMethod]
    public async Task battle_type()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.type", 0xD230, [0], "NORMAL");
    }

    [TestMethod]
    public async Task battle_result()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.result", 0xD0EE, [0], "WIN");
    }

    [TestMethod]
    public async Task battle_textBuffer()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.textBuffer", 0xD073, [132, 173, 164, 172, 184, 80, 191, 56, 23, 234, 6], "Enemy");
    }

    [TestMethod]
    public async Task battle_battleStart()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.battleStart", 0xD264, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_name()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.name", 0xD26B, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
    }

    [TestMethod]
    public async Task battle_trainer_class()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.class", 0xD22F, [0], "NOBODY");
    }

    [TestMethod]
    public async Task battle_trainer_id()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.id", 0xD231, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_totalPokemon()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.totalPokemon", 0xD280, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_nickname()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.nickname", 0xD3EA, [0], " ");
    }

    [TestMethod]
    public async Task battle_trainer_team_0_species()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.species", 0xD288, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_pokedexNumber()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.pokedexNumber", 0xD288, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_level()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.level", 0xD2A7, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_expPoints()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.expPoints", 0xD290, [0, 0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_friendship()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.friendship", 0xD2A3, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_statusCondition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.statusCondition", 0xD2A8, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_heldItem()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.heldItem", 0xD289, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_hp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.hp", 0xD2AA, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_maxHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.maxHp", 0xD2AC, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_attack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.attack", 0xD2AE, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_defense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.defense", 0xD2B0, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_specialAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.specialAttack", 0xD2B4, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_specialDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.specialDefense", 0xD2B6, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_speed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.speed", 0xD2B2, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_dvAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.dvAttack", 0xD29D, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_dvDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.dvDefense", 0xD29D, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_dvSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.dvSpeed", 0xD29E, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_dvSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.dvSpecial", 0xD29E, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_move1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.move1", 0xD28A, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_move2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.move2", 0xD28B, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_move3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.move3", 0xD28C, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_move4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.move4", 0xD28D, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_move1pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.move1pp", 0xD29F, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_move2pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.move2pp", 0xD2A0, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_move3pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.move3pp", 0xD2A1, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_move4pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.move4pp", 0xD2A2, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_move1ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.move1ppUp", 0xD29F, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_move2ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.move2ppUp", 0xD2A0, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_move3ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.move3ppUp", 0xD2A1, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_move4ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.move4ppUp", 0xD2A2, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_statExpHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.statExpHp", 0xD293, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_statExpAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.statExpAttack", 0xD295, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_statExpDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.statExpDefense", 0xD297, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_statExpSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.statExpSpeed", 0xD299, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_statExpSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.statExpSpecial", 0xD29B, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_pokerus()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.pokerus", 0xD2A4, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_0_trainerId()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.0.trainerId", 0xD28E, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_nickname()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.nickname", 0xD3F5, [0], " ");
    }

    [TestMethod]
    public async Task battle_trainer_team_1_species()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.species", 0xD2B8, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_pokedexNumber()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.pokedexNumber", 0xD2B8, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_level()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.level", 0xD2D7, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_expPoints()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.expPoints", 0xD2C0, [0, 0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_friendship()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.friendship", 0xD2D3, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_statusCondition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.statusCondition", 0xD2D8, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_heldItem()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.heldItem", 0xD2B9, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_hp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.hp", 0xD2DA, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_maxHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.maxHp", 0xD2DC, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_attack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.attack", 0xD2DE, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_defense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.defense", 0xD2E0, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_specialAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.specialAttack", 0xD2E4, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_specialDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.specialDefense", 0xD2E6, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_speed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.speed", 0xD2E2, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_dvAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.dvAttack", 0xD2CD, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_dvDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.dvDefense", 0xD2CD, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_dvSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.dvSpeed", 0xD2CE, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_dvSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.dvSpecial", 0xD2CE, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_move1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.move1", 0xD2BA, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_move2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.move2", 0xD2BB, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_move3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.move3", 0xD2BC, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_move4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.move4", 0xD2BD, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_move1pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.move1pp", 0xD2CF, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_move2pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.move2pp", 0xD2D0, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_move3pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.move3pp", 0xD2D1, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_move4pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.move4pp", 0xD2D2, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_move1ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.move1ppUp", 0xD2CF, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_move2ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.move2ppUp", 0xD2D0, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_move3ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.move3ppUp", 0xD2D1, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_move4ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.move4ppUp", 0xD2D2, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_statExpHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.statExpHp", 0xD2C3, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_statExpAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.statExpAttack", 0xD2C5, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_statExpDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.statExpDefense", 0xD2C7, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_statExpSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.statExpSpeed", 0xD2C9, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_statExpSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.statExpSpecial", 0xD2CB, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_pokerus()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.pokerus", 0xD2D4, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_1_trainerId()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.1.trainerId", 0xD2BE, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_nickname()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.nickname", 0xD400, [0], " ");
    }

    [TestMethod]
    public async Task battle_trainer_team_2_species()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.species", 0xD2E8, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_pokedexNumber()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.pokedexNumber", 0xD2E8, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_level()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.level", 0xD307, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_expPoints()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.expPoints", 0xD2F0, [0, 0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_friendship()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.friendship", 0xD303, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_statusCondition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.statusCondition", 0xD308, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_heldItem()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.heldItem", 0xD2E9, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_hp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.hp", 0xD30A, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_maxHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.maxHp", 0xD30C, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_attack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.attack", 0xD30E, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_defense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.defense", 0xD310, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_specialAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.specialAttack", 0xD314, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_specialDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.specialDefense", 0xD316, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_speed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.speed", 0xD312, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_dvAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.dvAttack", 0xD2FD, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_dvDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.dvDefense", 0xD2FD, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_dvSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.dvSpeed", 0xD2FE, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_dvSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.dvSpecial", 0xD2FE, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_move1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.move1", 0xD2EA, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_move2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.move2", 0xD2EB, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_move3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.move3", 0xD2EC, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_move4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.move4", 0xD2ED, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_move1pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.move1pp", 0xD2FF, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_move2pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.move2pp", 0xD300, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_move3pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.move3pp", 0xD301, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_move4pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.move4pp", 0xD302, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_move1ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.move1ppUp", 0xD2FF, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_move2ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.move2ppUp", 0xD300, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_move3ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.move3ppUp", 0xD301, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_move4ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.move4ppUp", 0xD302, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_statExpHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.statExpHp", 0xD2F3, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_statExpAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.statExpAttack", 0xD2F5, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_statExpDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.statExpDefense", 0xD2F7, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_statExpSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.statExpSpeed", 0xD2F9, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_statExpSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.statExpSpecial", 0xD2FB, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_pokerus()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.pokerus", 0xD304, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_2_trainerId()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.2.trainerId", 0xD2EE, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_nickname()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.nickname", 0xD40B, [0], " ");
    }

    [TestMethod]
    public async Task battle_trainer_team_3_species()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.species", 0xD318, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_pokedexNumber()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.pokedexNumber", 0xD318, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_level()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.level", 0xD337, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_expPoints()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.expPoints", 0xD320, [0, 0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_friendship()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.friendship", 0xD333, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_statusCondition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.statusCondition", 0xD338, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_heldItem()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.heldItem", 0xD319, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_hp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.hp", 0xD33A, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_maxHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.maxHp", 0xD33C, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_attack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.attack", 0xD33E, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_defense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.defense", 0xD340, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_specialAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.specialAttack", 0xD344, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_specialDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.specialDefense", 0xD346, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_speed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.speed", 0xD342, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_dvAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.dvAttack", 0xD32D, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_dvDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.dvDefense", 0xD32D, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_dvSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.dvSpeed", 0xD32E, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_dvSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.dvSpecial", 0xD32E, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_move1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.move1", 0xD31A, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_move2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.move2", 0xD31B, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_move3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.move3", 0xD31C, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_move4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.move4", 0xD31D, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_move1pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.move1pp", 0xD32F, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_move2pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.move2pp", 0xD330, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_move3pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.move3pp", 0xD331, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_move4pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.move4pp", 0xD332, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_move1ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.move1ppUp", 0xD32F, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_move2ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.move2ppUp", 0xD330, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_move3ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.move3ppUp", 0xD331, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_move4ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.move4ppUp", 0xD332, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_statExpHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.statExpHp", 0xD323, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_statExpAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.statExpAttack", 0xD325, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_statExpDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.statExpDefense", 0xD327, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_statExpSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.statExpSpeed", 0xD329, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_statExpSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.statExpSpecial", 0xD32B, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_pokerus()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.pokerus", 0xD334, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_3_trainerId()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.3.trainerId", 0xD31E, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_nickname()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.nickname", 0xD416, [0], " ");
    }

    [TestMethod]
    public async Task battle_trainer_team_4_species()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.species", 0xD348, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_pokedexNumber()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.pokedexNumber", 0xD348, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_level()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.level", 0xD367, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_expPoints()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.expPoints", 0xD350, [0, 0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_friendship()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.friendship", 0xD363, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_statusCondition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.statusCondition", 0xD368, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_heldItem()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.heldItem", 0xD349, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_hp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.hp", 0xD36A, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_maxHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.maxHp", 0xD36C, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_attack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.attack", 0xD36E, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_defense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.defense", 0xD370, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_specialAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.specialAttack", 0xD374, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_specialDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.specialDefense", 0xD376, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_speed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.speed", 0xD372, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_dvAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.dvAttack", 0xD35D, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_dvDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.dvDefense", 0xD35D, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_dvSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.dvSpeed", 0xD35E, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_dvSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.dvSpecial", 0xD35E, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_move1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.move1", 0xD34A, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_move2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.move2", 0xD34B, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_move3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.move3", 0xD34C, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_move4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.move4", 0xD34D, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_move1pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.move1pp", 0xD35F, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_move2pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.move2pp", 0xD360, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_move3pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.move3pp", 0xD361, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_move4pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.move4pp", 0xD362, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_move1ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.move1ppUp", 0xD35F, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_move2ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.move2ppUp", 0xD360, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_move3ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.move3ppUp", 0xD361, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_move4ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.move4ppUp", 0xD362, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_statExpHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.statExpHp", 0xD353, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_statExpAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.statExpAttack", 0xD355, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_statExpDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.statExpDefense", 0xD357, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_statExpSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.statExpSpeed", 0xD359, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_statExpSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.statExpSpecial", 0xD35B, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_pokerus()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.pokerus", 0xD364, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_4_trainerId()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.4.trainerId", 0xD34E, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_nickname()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.nickname", 0xD421, [0], " ");
    }

    [TestMethod]
    public async Task battle_trainer_team_5_species()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.species", 0xD378, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_pokedexNumber()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.pokedexNumber", 0xD378, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_level()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.level", 0xD397, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_expPoints()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.expPoints", 0xD380, [0, 0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_friendship()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.friendship", 0xD393, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_statusCondition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.statusCondition", 0xD398, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_heldItem()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.heldItem", 0xD379, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_hp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.hp", 0xD39A, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_maxHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.maxHp", 0xD39C, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_attack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.attack", 0xD39E, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_defense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.defense", 0xD3A0, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_specialAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.specialAttack", 0xD3A4, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_specialDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.specialDefense", 0xD3A6, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_speed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.speed", 0xD3A2, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_dvAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.dvAttack", 0xD38D, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_dvDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.dvDefense", 0xD38D, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_dvSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.dvSpeed", 0xD38E, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_dvSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.dvSpecial", 0xD38E, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_move1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.move1", 0xD37A, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_move2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.move2", 0xD37B, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_move3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.move3", 0xD37C, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_move4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.move4", 0xD37D, [0], null);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_move1pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.move1pp", 0xD38F, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_move2pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.move2pp", 0xD390, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_move3pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.move3pp", 0xD391, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_move4pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.move4pp", 0xD392, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_move1ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.move1ppUp", 0xD38F, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_move2ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.move2ppUp", 0xD390, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_move3ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.move3ppUp", 0xD391, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_move4ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.move4ppUp", 0xD392, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_statExpHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.statExpHp", 0xD383, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_statExpAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.statExpAttack", 0xD385, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_statExpDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.statExpDefense", 0xD387, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_statExpSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.statExpSpeed", 0xD389, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_statExpSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.statExpSpecial", 0xD38B, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_pokerus()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.pokerus", 0xD394, [0], 0);
    }

    [TestMethod]
    public async Task battle_trainer_team_5_trainerId()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.trainer.team.5.trainerId", 0xD37E, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_yourPokemon_partyPos()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.partyPos", 0xD0D4, [0], 0);
    }

    [TestMethod]
    public async Task battle_yourPokemon_species()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.species", 0xC62C, [158], "Totodile");
    }

    [TestMethod]
    public async Task battle_yourPokemon_pokedexNumber()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.pokedexNumber", 0xC62C, [158], "158");
    }

    [TestMethod]
    public async Task battle_yourPokemon_type1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.type1", 0xC64A, [21], "Water");
    }

    [TestMethod]
    public async Task battle_yourPokemon_type2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.type2", 0xC64B, [21], "Water");
    }

    [TestMethod]
    public async Task battle_yourPokemon_level()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.level", 0xC639, [5], 5);
    }

    [TestMethod]
    public async Task battle_yourPokemon_modStageAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.modStageAttack", 0xC6CC, [7], "0");
    }

    [TestMethod]
    public async Task battle_yourPokemon_modStageDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.modStageDefense", 0xC6CD, [7], "0");
    }

    [TestMethod]
    public async Task battle_yourPokemon_modStageSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.modStageSpeed", 0xC6CE, [7], "0");
    }

    [TestMethod]
    public async Task battle_yourPokemon_modStageSpecialAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.modStageSpecialAttack", 0xC6CF, [7], "0");
    }

    [TestMethod]
    public async Task battle_yourPokemon_modStageSpecialDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.modStageSpecialDefense", 0xC6D0, [7], "0");
    }

    [TestMethod]
    public async Task battle_yourPokemon_modStageAccuracy()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.modStageAccuracy", 0xC6D1, [7], "0");
    }

    [TestMethod]
    public async Task battle_yourPokemon_modStageEvasion()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.modStageEvasion", 0xC6D2, [7], "0");
    }

    [TestMethod]
    public async Task battle_yourPokemon_hp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.hp", 0xC63C, [0, 19], 19);
    }

    [TestMethod]
    public async Task battle_yourPokemon_maxHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.maxHp", 0xC63E, [0, 21], 21);
    }

    [TestMethod]
    public async Task battle_yourPokemon_attack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.attack", 0xC640, [0, 12], 12);
    }

    [TestMethod]
    public async Task battle_yourPokemon_defense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.defense", 0xC642, [0, 12], 12);
    }

    [TestMethod]
    public async Task battle_yourPokemon_speed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.speed", 0xC644, [0, 10], 10);
    }

    [TestMethod]
    public async Task battle_yourPokemon_specialAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.specialAttack", 0xC646, [0, 10], 10);
    }

    [TestMethod]
    public async Task battle_yourPokemon_specialDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.specialDefense", 0xC648, [0, 10], 10);
    }

    [TestMethod]
    public async Task battle_yourPokemon_move1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.move1", 0xC62E, [10], "Scratch");
    }

    [TestMethod]
    public async Task battle_yourPokemon_move2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.move2", 0xC62F, [43], "Leer");
    }

    [TestMethod]
    public async Task battle_yourPokemon_move3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.move3", 0xC630, [0], null);
    }

    [TestMethod]
    public async Task battle_yourPokemon_move4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.move4", 0xC631, [0], null);
    }

    [TestMethod]
    public async Task battle_yourPokemon_move1pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.move1pp", 0xC634, [34], 34);
    }

    [TestMethod]
    public async Task battle_yourPokemon_move2pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.move2pp", 0xC635, [30], 30);
    }

    [TestMethod]
    public async Task battle_yourPokemon_move3pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.move3pp", 0xC636, [0], 0);
    }

    [TestMethod]
    public async Task battle_yourPokemon_move4pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.move4pp", 0xC637, [0], 0);
    }

    [TestMethod]
    public async Task battle_yourPokemon_move1ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.move1ppUp", 0xC634, [34], 0);
    }

    [TestMethod]
    public async Task battle_yourPokemon_move2ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.move2ppUp", 0xC635, [30], 0);
    }

    [TestMethod]
    public async Task battle_yourPokemon_move3ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.move3ppUp", 0xC636, [0], 0);
    }

    [TestMethod]
    public async Task battle_yourPokemon_move4ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.move4ppUp", 0xC637, [0], 0);
    }

    [TestMethod]
    public async Task battle_yourPokemon_counters_rollout()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.counters.rollout", 0xC672, [0], 0);
    }

    [TestMethod]
    public async Task battle_yourPokemon_counters_confuse()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.counters.confuse", 0xC673, [0], 0);
    }

    [TestMethod]
    public async Task battle_yourPokemon_counters_toxic()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.counters.toxic", 0xC674, [0], 0);
    }

    [TestMethod]
    public async Task battle_yourPokemon_counters_disable()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.counters.disable", 0xC675, [0], 0);
    }

    [TestMethod]
    public async Task battle_yourPokemon_counters_encore()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.counters.encore", 0xC676, [0], 0);
    }

    [TestMethod]
    public async Task battle_yourPokemon_counters_perish()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.counters.perish", 0xC677, [0], 0);
    }

    [TestMethod]
    public async Task battle_yourPokemon_counters_furyCutter()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.counters.furyCutter", 0xC678, [0], 0);
    }

    [TestMethod]
    public async Task battle_yourPokemon_counters_protect()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.counters.protect", 0xC679, [0], 0);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_nightmare()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.nightmare", 0xC668, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_curse()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.curse", 0xC668, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_protect()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.protect", 0xC668, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_identified()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.identified", 0xC668, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_perish()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.perish", 0xC668, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_endure()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.endure", 0xC668, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_rollout()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.rollout", 0xC668, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_in_love()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.in_love", 0xC668, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_curled()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.curled", 0xC669, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_bide()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.bide", 0xC66A, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_rampage()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.rampage", 0xC66A, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_in_loop()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.in_loop", 0xC66A, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_flinched()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.flinched", 0xC66A, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_charged()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.charged", 0xC66A, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_underground()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.underground", 0xC66A, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_flying()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.flying", 0xC66A, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_confused()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.confused", 0xC66A, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_x_accuracy()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.x_accuracy", 0xC66B, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_mist()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.mist", 0xC66B, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_focus_energ()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.focus_energ", 0xC66B, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_substitute()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.substitute", 0xC66B, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_recharge()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.recharge", 0xC66B, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_rage()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.rage", 0xC66B, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_leech_seed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.leech_seed", 0xC66B, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_toxic()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.toxic", 0xC66C, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_transformed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.transformed", 0xC66C, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_encored()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.encored", 0xC66C, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_lock_on()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.lock_on", 0xC66C, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_destiny_bon()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.destiny_bon", 0xC66C, [0], false);
    }

    [TestMethod]
    public async Task battle_yourPokemon_status_cant_run()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.yourPokemon.status.cant_run", 0xC66C, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_partyPos()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.partyPos", 0xC663, [0], 0);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_species()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.species", 0xD206, [16], "Pidgey");
    }

    [TestMethod]
    public async Task battle_enemyPokemon_pokedexNumber()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.pokedexNumber", 0xD206, [16], "16");
    }

    [TestMethod]
    public async Task battle_enemyPokemon_type1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.type1", 0xD224, [0], "Normal");
    }

    [TestMethod]
    public async Task battle_enemyPokemon_type2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.type2", 0xD225, [2], "Flying");
    }

    [TestMethod]
    public async Task battle_enemyPokemon_heldItem()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.heldItem", 0xD207, [0], null);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_level()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.level", 0xD12D, [2], 2);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_move1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.move1", 0xD208, [33], "Tackle");
    }

    [TestMethod]
    public async Task battle_enemyPokemon_move2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.move2", 0xD209, [0], null);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_move3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.move3", 0xD20A, [0], null);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_move4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.move4", 0xD20B, [0], null);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_move1pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.move1pp", 0xD20E, [34], 34);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_move2pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.move2pp", 0xD20F, [0], 0);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_move3pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.move3pp", 0xD210, [0], 0);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_move4pp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.move4pp", 0xD211, [0], 0);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_move1ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.move1ppUp", 0xD20E, [34], 0);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_move2ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.move2ppUp", 0xD20F, [0], 0);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_move3ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.move3ppUp", 0xD210, [0], 0);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_move4ppUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.move4ppUp", 0xD211, [0], 0);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_maxHp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.maxHp", 0xD218, [0, 13], 13);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_hp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.hp", 0xD216, [0, 7], 7);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_attack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.attack", 0xD21A, [0, 7], 7);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_defense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.defense", 0xD21C, [0, 7], 7);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_specialAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.specialAttack", 0xD220, [0, 6], 6);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_specialDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.specialDefense", 0xD222, [0, 6], 6);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_speed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.speed", 0xD21E, [0, 7], 7);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_modStageAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.modStageAttack", 0xC6D4, [7], "0");
    }

    [TestMethod]
    public async Task battle_enemyPokemon_modStageDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.modStageDefense", 0xC6D5, [7], "0");
    }

    [TestMethod]
    public async Task battle_enemyPokemon_modStageSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.modStageSpeed", 0xC6D6, [7], "0");
    }

    [TestMethod]
    public async Task battle_enemyPokemon_modStageSpecialAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.modStageSpecialAttack", 0xC6D7, [7], "0");
    }

    [TestMethod]
    public async Task battle_enemyPokemon_modStageSpecialDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.modStageSpecialDefense", 0xC6D8, [7], "0");
    }

    [TestMethod]
    public async Task battle_enemyPokemon_modStageAccuracy()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.modStageAccuracy", 0xC6D9, [7], "0");
    }

    [TestMethod]
    public async Task battle_enemyPokemon_modStageEvasion()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.modStageEvasion", 0xC6DA, [7], "0");
    }

    [TestMethod]
    public async Task battle_enemyPokemon_enemyMonEnd()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.enemyMonEnd", 0xD22D, [1], 1);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_counters_rollout()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.counters.rollout", 0xC67A, [0], 0);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_counters_confuse()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.counters.confuse", 0xC67B, [0], 0);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_counters_toxic()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.counters.toxic", 0xC67C, [0], 0);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_counters_disable()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.counters.disable", 0xC67D, [0], 0);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_counters_encore()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.counters.encore", 0xC67E, [0], 0);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_counters_perish()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.counters.perish", 0xC67F, [0], 0);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_counters_furyCutter()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.counters.furyCutter", 0xC680, [0], 0);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_counters_protect()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.counters.protect", 0xC681, [0], 0);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_nightmare()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.nightmare", 0xC66D, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_curse()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.curse", 0xC66D, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_protect()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.protect", 0xC66D, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_identified()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.identified", 0xC66D, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_perish()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.perish", 0xC66D, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_endure()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.endure", 0xC66D, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_rollout()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.rollout", 0xC66D, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_in_love()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.in_love", 0xC66D, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_curled()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.curled", 0xC66E, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_bide()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.bide", 0xC66F, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_rampage()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.rampage", 0xC66F, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_in_loop()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.in_loop", 0xC66F, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_flinched()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.flinched", 0xC66F, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_charged()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.charged", 0xC66F, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_underground()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.underground", 0xC66F, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_flying()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.flying", 0xC66F, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_confused()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.confused", 0xC66F, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_x_accuracy()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.x_accuracy", 0xC670, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_mist()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.mist", 0xC670, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_focus_energ()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.focus_energ", 0xC670, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_substitute()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.substitute", 0xC670, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_recharge()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.recharge", 0xC670, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_rage()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.rage", 0xC670, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_leech_seed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.leech_seed", 0xC670, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_toxic()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.toxic", 0xC671, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_transformed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.transformed", 0xC671, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_encored()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.encored", 0xC671, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_lock_on()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.lock_on", 0xC671, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_destiny_bon()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.destiny_bon", 0xC671, [0], false);
    }

    [TestMethod]
    public async Task battle_enemyPokemon_status_cant_run()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.enemyPokemon.status.cant_run", 0xC671, [0], false);
    }

    [TestMethod]
    public async Task battle_info_currentDamage()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.info.currentDamage", 0xD256, [0, 0], 0);
    }

    [TestMethod]
    public async Task battle_info_lowHealthAlarm()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.info.lowHealthAlarm", 0xC6FD, [0], "Enabled");
    }

    [TestMethod]
    public async Task battle_info_miss()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.info.miss", 0xC667, [0], 0);
    }

    [TestMethod]
    public async Task battle_info_turnEnded()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.info.turnEnded", 0xC6B4, [0], 0);
    }

    [TestMethod]
    public async Task battle_info_playerTurnTaken()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.info.playerTurnTaken", 0xC6DD, [1], 1);
    }

    [TestMethod]
    public async Task battle_info_enemyTurnTaken()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.info.enemyTurnTaken", 0xC6DC, [1], 1);
    }

    [TestMethod]
    public async Task battle_field_player_statusSafeguard()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.field.player.statusSafeguard", 0xC6FF, [0], false);
    }

    [TestMethod]
    public async Task battle_field_player_statusReflect()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.field.player.statusReflect", 0xC6FF, [0], false);
    }

    [TestMethod]
    public async Task battle_field_player_statusLightScreen()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.field.player.statusLightScreen", 0xC6FF, [0], false);
    }

    [TestMethod]
    public async Task battle_field_player_safeguardCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.field.player.safeguardCount", 0xC701, [0], 0);
    }

    [TestMethod]
    public async Task battle_field_player_lightScreenCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.field.player.lightScreenCount", 0xC702, [0], 0);
    }

    [TestMethod]
    public async Task battle_field_player_reflectCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.field.player.reflectCount", 0xC703, [0], 0);
    }

    [TestMethod]
    public async Task battle_field_enemy_statusSafeguard()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.field.enemy.statusSafeguard", 0xC700, [0], false);
    }

    [TestMethod]
    public async Task battle_field_enemy_statusReflect()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.field.enemy.statusReflect", 0xC700, [0], false);
    }

    [TestMethod]
    public async Task battle_field_enemy_statusLightScreen()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.field.enemy.statusLightScreen", 0xC700, [0], false);
    }

    [TestMethod]
    public async Task battle_field_enemy_safeguardCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.field.enemy.safeguardCount", 0xCBE3, [0], 0);
    }

    [TestMethod]
    public async Task battle_field_enemy_lightScreenCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.field.enemy.lightScreenCount", 0xCBE4, [0], 0);
    }

    [TestMethod]
    public async Task battle_field_enemy_reflectCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.field.enemy.reflectCount", 0xCBE5, [0], 0);
    }

    [TestMethod]
    public async Task battle_field_weather()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.field.weather", 0xC70A, [0], null);
    }

    [TestMethod]
    public async Task battle_field_weatherCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.field.weatherCount", 0xC70B, [0], 0);
    }

    [TestMethod]
    public async Task battle_weather_weatherType()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.weather.weatherType", 0xC70A, [0], null);
    }

    [TestMethod]
    public async Task battle_weather_weatherTurnsRemaining()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.weather.weatherTurnsRemaining", 0xC70B, [0], 0);
    }

    [TestMethod]
    public async Task battle_lowHealthAlarm()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("battle.lowHealthAlarm", 0xC6FD, [0], "Enabled");
    }

    [TestMethod]
    public async Task options_textSpeed2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("options.textSpeed2", 0xCFCC, [225], false);
    }

    [TestMethod]
    public async Task options_textSpeed3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("options.textSpeed3", 0xCFCC, [225], false);
    }

    [TestMethod]
    public async Task options_sound()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("options.sound", 0xCFCC, [225], true);
    }

    [TestMethod]
    public async Task options_battleStyle()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("options.battleStyle", 0xCFCC, [225], true);
    }

    [TestMethod]
    public async Task options_battleAnimations()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("options.battleAnimations", 0xCFCC, [225], true);
    }

    [TestMethod]
    public async Task gameTime_hours()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("gameTime.hours", 0xD4C4, [0, 0], 0);
    }

    [TestMethod]
    public async Task gameTime_minutes()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("gameTime.minutes", 0xD4C6, [3], 3);
    }

    [TestMethod]
    public async Task gameTime_seconds()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("gameTime.seconds", 0xD4C7, [29], 29);
    }

    [TestMethod]
    public async Task gameTime_frames()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("gameTime.frames", 0xD4C8, [56], 56);
    }

    [TestMethod]
    public async Task time_current_day()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("time.current.day", 0xD4CB, [0], "Sunday");
    }

    [TestMethod]
    public async Task time_current_hour()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("time.current.hour", 0xFF94, [10], 10);
    }

    [TestMethod]
    public async Task time_current_minute()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("time.current.minute", 0xFF96, [3], 3);
    }

    [TestMethod]
    public async Task time_current_second()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("time.current.second", 0xFF98, [48], 48);
    }

    [TestMethod]
    public async Task time_current_dst()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("time.current.dst", 0xD4C2, [128], true);
    }

    [TestMethod]
    public async Task time_current_timeOfDay()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("time.current.timeOfDay", 0xD269, [1], "Day");
    }

    [TestMethod]
    public async Task time_start_day()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("time.start.day", 0xD4B6, [0], "Sunday");
    }

    [TestMethod]
    public async Task time_start_hour()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("time.start.hour", 0xD4B7, [9], 9);
    }

    [TestMethod]
    public async Task time_start_minute()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("time.start.minute", 0xD4B8, [59], 59);
    }

    [TestMethod]
    public async Task time_start_second()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("time.start.second", 0xD4B9, [42], 42);
    }

    [TestMethod]
    public async Task time_rtc_day()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("time.rtc.day", 0xFF8D, [0, 0], 0);
    }

    [TestMethod]
    public async Task time_rtc_hour()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("time.rtc.hour", 0xFF8F, [0], 0);
    }

    [TestMethod]
    public async Task time_rtc_minute()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("time.rtc.minute", 0xFF90, [4], 4);
    }

    [TestMethod]
    public async Task time_rtc_second()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("time.rtc.second", 0xFF91, [6], 6);
    }

    [TestMethod]
    public async Task gameClock_day()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("gameClock.day", 0xD4B6, [0], "Sunday");
    }

    [TestMethod]
    public async Task audio_mapMusic()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("audio.mapMusic", 0xC2C0, [52], 52);
    }

    [TestMethod]
    public async Task audio_currentSound()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("audio.currentSound", 0xC2BF, [172], 172);
    }

    [TestMethod]
    public async Task audio_musicId()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("audio.musicId", 0xC29D, [172, 0], 44032);
    }

    [TestMethod]
    public async Task audio_musicBank()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("audio.musicBank", 0xC29F, [60], 60);
    }

    [TestMethod]
    public async Task audio_channel1MusicID()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("audio.channel1MusicID", 0xC101, [41, 0], 10496);
    }

    [TestMethod]
    public async Task audio_channel2MusicID()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("audio.channel2MusicID", 0xC133, [41, 0], 10496);
    }

    [TestMethod]
    public async Task audio_channel3MusicID()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("audio.channel3MusicID", 0xC165, [41, 0], 10496);
    }

    [TestMethod]
    public async Task audio_channel4MusicID()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("audio.channel4MusicID", 0xC197, [0, 0], 0);
    }

    [TestMethod]
    public async Task audio_channel5MusicID()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("audio.channel5MusicID", 0xC1C9, [0, 0], 0);
    }

    [TestMethod]
    public async Task audio_channel6MusicID()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("audio.channel6MusicID", 0xC1FB, [0, 0], 0);
    }

    [TestMethod]
    public async Task audio_channel7MusicID()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("audio.channel7MusicID", 0xC22D, [0, 0], 0);
    }

    [TestMethod]
    public async Task audio_channel8MusicID()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("audio.channel8MusicID", 0xC25F, [0, 0], 0);
    }

    [TestMethod]
    public async Task screen_text_prompt()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.text.prompt", 0xC606, [122], "");
    }

    [TestMethod]
    public async Task screen_menu_currentItem()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.menu.currentItem", 0xCC26, [0], 0);
    }

    [TestMethod]
    public async Task screen_menu_wMenuFlags()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.menu.wMenuFlags", 0xCF81, [64], 64);
    }

    [TestMethod]
    public async Task screen_menu_wMenuCursorPosition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.menu.wMenuCursorPosition", 0xCF88, [1], 1);
    }

    [TestMethod]
    public async Task screen_menu_wPCItemsCursor()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.menu.wPCItemsCursor", 0xD0D7, [0], 0);
    }

    [TestMethod]
    public async Task screen_menu_wPartyMenuCursor()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.menu.wPartyMenuCursor", 0xD0D8, [0], 0);
    }

    [TestMethod]
    public async Task screen_menu_wItemsPocketCursor()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.menu.wItemsPocketCursor", 0xD0D9, [0], 0);
    }

    [TestMethod]
    public async Task screen_menu_wKeyItemsPocketCursor()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.menu.wKeyItemsPocketCursor", 0xD0DA, [0], 0);
    }

    [TestMethod]
    public async Task screen_menu_wBallsPocketCursor()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.menu.wBallsPocketCursor", 0xD0DB, [0], 0);
    }

    [TestMethod]
    public async Task screen_menu_wTMHMPocketCursor()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.menu.wTMHMPocketCursor", 0xD0DC, [0], 0);
    }

    [TestMethod]
    public async Task screen_menu_wPCItemsScrollPosition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.menu.wPCItemsScrollPosition", 0xD0DD, [0], 0);
    }

    [TestMethod]
    public async Task screen_menu_wItemsPocketScrollPosition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.menu.wItemsPocketScrollPosition", 0xD0DF, [0], 0);
    }

    [TestMethod]
    public async Task screen_menu_wKeyItemsPocketScrollPosition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.menu.wKeyItemsPocketScrollPosition", 0xD0E0, [0], 0);
    }

    [TestMethod]
    public async Task screen_menu_wBallsPocketScrollPosition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.menu.wBallsPocketScrollPosition", 0xD0E1, [0], 0);
    }

    [TestMethod]
    public async Task screen_menu_wTMHMPocketScrollPosition()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.menu.wTMHMPocketScrollPosition", 0xD0E2, [0], 0);
    }

    [TestMethod]
    public async Task screen_tiles_column1_tile1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.tiles.column1.tile1", 0x980C, [0], 0);
    }

    [TestMethod]
    public async Task screen_tiles_column1_tile2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.tiles.column1.tile2", 0x982C, [1], 1);
    }

    [TestMethod]
    public async Task screen_tiles_column1_tile3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.tiles.column1.tile3", 0x984C, [2], 2);
    }

    [TestMethod]
    public async Task screen_tiles_column1_tile4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.tiles.column1.tile4", 0x986C, [3], 3);
    }

    [TestMethod]
    public async Task screen_tiles_column1_tile5()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.tiles.column1.tile5", 0x988C, [4], 4);
    }

    [TestMethod]
    public async Task screen_tiles_column1_tile6()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.tiles.column1.tile6", 0x98AC, [5], 5);
    }

    [TestMethod]
    public async Task screen_tiles_column1_tile7()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("screen.tiles.column1.tile7", 0x98CC, [6], 6);
    }

    [TestMethod]
    public async Task squidgyExtras_repelStepsRemaining()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.repelStepsRemaining", 0xDCA1, [0], 0);
    }

    [TestMethod]
    public async Task squidgyExtras_walkingType()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.walkingType", 0xD95D, [0], "Walking");
    }

    [TestMethod]
    public async Task squidgyExtras_warpLocation()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.warpLocation", 0xDCB2, [0, 0], null);
    }

    [TestMethod]
    public async Task squidgyExtras_mapLocation()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.mapLocation", 0xDCB5, [24, 3], "Route 29");
    }

    [TestMethod]
    public async Task squidgyExtras_bikeCall()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.bikeCall", 0xDCA2, [0, 0], 0);
    }

    [TestMethod]
    public async Task squidgyExtras_poisonSteps()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.poisonSteps", 0xDC74, [3], 3);
    }

    [TestMethod]
    public async Task squidgyExtras_battleFriendship()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.battleFriendship", 0xC638, [70], 70);
    }

    [TestMethod]
    public async Task squidgyExtras_battleDVs_battleDVAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.battleDVs.battleDVAttack", 0xC632, [187], 11);
    }

    [TestMethod]
    public async Task squidgyExtras_battleDVs_battleDVDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.battleDVs.battleDVDefense", 0xC632, [187], 11);
    }

    [TestMethod]
    public async Task squidgyExtras_battleDVs_battleDVSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.battleDVs.battleDVSpeed", 0xC633, [155], 9);
    }

    [TestMethod]
    public async Task squidgyExtras_battleDVs_battleDVSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.battleDVs.battleDVSpecial", 0xC633, [155], 11);
    }

    [TestMethod]
    public async Task squidgyExtras_enemyDVs_enemyDVAttack()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.enemyDVs.enemyDVAttack", 0xD20C, [140], 8);
    }

    [TestMethod]
    public async Task squidgyExtras_enemyDVs_enemyDVDefense()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.enemyDVs.enemyDVDefense", 0xD20C, [140], 12);
    }

    [TestMethod]
    public async Task squidgyExtras_enemyDVs_enemyDVSpeed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.enemyDVs.enemyDVSpeed", 0xD20D, [210], 13);
    }

    [TestMethod]
    public async Task squidgyExtras_enemyDVs_enemyDVSpecial()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.enemyDVs.enemyDVSpecial", 0xD20D, [210], 2);
    }

    [TestMethod]
    public async Task squidgyExtras_inBattleHeldItem()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.inBattleHeldItem", 0xC62D, [173], "Berry");
    }

    [TestMethod]
    public async Task squidgyExtras_playerMinimized()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.playerMinimized", 0xC6FE, [0], 0);
    }

    [TestMethod]
    public async Task squidgyExtras_enemyMinimized()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.enemyMinimized", 0xC6FA, [0], 0);
    }

    [TestMethod]
    public async Task squidgyExtras_hallOfFame()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.hallOfFame", 0xD84C, [16], false);
    }

    [TestMethod]
    public async Task squidgyExtras_isFlash()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.isFlash", 0xD84C, [16], false);
    }

    [TestMethod]
    public async Task squidgyExtras_wildEncounters()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.wildEncounters", 0xD84C, [16], false);
    }

    [TestMethod]
    public async Task squidgyExtras_battleFlag64()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.battleFlag64", 0xC664, [1], 1);
    }

    [TestMethod]
    public async Task squidgyExtras_playerMoveUsed1()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.playerMoveUsed1", 0xC712, [10], "Scratch");
    }

    [TestMethod]
    public async Task squidgyExtras_playerMoveUsed2()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.playerMoveUsed2", 0xC713, [0], null);
    }

    [TestMethod]
    public async Task squidgyExtras_playerMoveUsed3()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.playerMoveUsed3", 0xC714, [0], null);
    }

    [TestMethod]
    public async Task squidgyExtras_playerMoveUsed4()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.playerMoveUsed4", 0xC715, [0], null);
    }

    [TestMethod]
    public async Task squidgyExtras_eliteFourRooms_willRoomID()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.eliteFourRooms.willRoomID", 0xD97F, [0], 0);
    }

    [TestMethod]
    public async Task squidgyExtras_eliteFourRooms_kogaRoomID()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.eliteFourRooms.kogaRoomID", 0xD980, [0], 0);
    }

    [TestMethod]
    public async Task squidgyExtras_eliteFourRooms_brunoRoomID()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.eliteFourRooms.brunoRoomID", 0xD981, [0], 0);
    }

    [TestMethod]
    public async Task squidgyExtras_eliteFourRooms_karenRoomID()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.eliteFourRooms.karenRoomID", 0xD982, [0], 0);
    }

    [TestMethod]
    public async Task squidgyExtras_eliteFourRooms_lanceRoomID()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.eliteFourRooms.lanceRoomID", 0xD983, [0], 0);
    }

    [TestMethod]
    public async Task squidgyExtras_enemyBaseStats_enemyBaseHP()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.enemyBaseStats.enemyBaseHP", 0xD237, [40], 40);
    }

    [TestMethod]
    public async Task squidgyExtras_enemyBaseStats_enemyBaseAtk()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.enemyBaseStats.enemyBaseAtk", 0xD238, [45], 45);
    }

    [TestMethod]
    public async Task squidgyExtras_enemyBaseStats_enemyBaseDef()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.enemyBaseStats.enemyBaseDef", 0xD239, [40], 40);
    }

    [TestMethod]
    public async Task squidgyExtras_enemyBaseStats_enemyBaseSpA()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.enemyBaseStats.enemyBaseSpA", 0xD23B, [35], 35);
    }

    [TestMethod]
    public async Task squidgyExtras_enemyBaseStats_enemyBaseSpD()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.enemyBaseStats.enemyBaseSpD", 0xD23C, [35], 35);
    }

    [TestMethod]
    public async Task squidgyExtras_enemyBaseStats_enemyBaseSpe()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("squidgyExtras.enemyBaseStats.enemyBaseSpe", 0xD23A, [56], 56);
    }

    [TestMethod]
    public async Task patch_turnCounter()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.turnCounter", 0xCFD8, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_time_frameCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.time.frameCount", 0x10191, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_time_oWFrameCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.time.oWFrameCount", 0x10195, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_time_battleFrameCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.time.battleFrameCount", 0x10199, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_time_menuFrameCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.time.menuFrameCount", 0x1019D, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_time_introsFrameCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.time.introsFrameCount", 0x101A1, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_saves_saveCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.saves.saveCount", 0x101A5, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_saves_reloadCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.saves.reloadCount", 0x101A7, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_saves_clockResetCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.saves.clockResetCount", 0x101A9, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_steps_stepCount()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.steps.stepCount", 0x101AB, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_steps_stepCountWalk()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.steps.stepCountWalk", 0x101AF, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_steps_stepCountSurf()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.steps.stepCountSurf", 0x101B3, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_steps_stepCountBike()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.steps.stepCountBike", 0x101B7, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_steps_bonks()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.steps.bonks", 0x101BB, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battles_battles()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battles.battles", 0x10223, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battles_trainerBattles()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battles.trainerBattles", 0x10225, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battles_wildBattles()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battles.wildBattles", 0x10227, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battles_battlesFled()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battles.battlesFled", 0x10229, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battles_failedRuns()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battles.failedRuns", 0x1022B, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_damage_totalDamageDealt()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.damage.totalDamageDealt", 0x101BD, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_damage_actualDamageDealt()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.damage.actualDamageDealt", 0x101C1, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_damage_totalDamageTaken()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.damage.totalDamageTaken", 0x101C5, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_damage_actualDamageTaken()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.damage.actualDamageTaken", 0x101C9, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_hits_ownMovesHit()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.hits.ownMovesHit", 0x101CD, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_hits_ownMovesMissed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.hits.ownMovesMissed", 0x101CF, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_hits_enemyMovesHit()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.hits.enemyMovesHit", 0x101D1, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_hits_enemyMovesMissed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.hits.enemyMovesMissed", 0x101D3, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_hits_ownMovesSE()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.hits.ownMovesSE", 0x101D5, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_hits_ownMovesNVE()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.hits.ownMovesNVE", 0x101D7, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_hits_enemyMovesSE()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.hits.enemyMovesSE", 0x101D9, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_hits_enemyMovesNVE()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.hits.enemyMovesNVE", 0x101DB, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_hits_criticalsDealt()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.hits.criticalsDealt", 0x101DD, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_hits_oHKOsDealt()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.hits.oHKOsDealt", 0x101DF, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_hits_criticalsTaken()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.hits.criticalsTaken", 0x101E1, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_hits_oHKOsTaken()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.hits.oHKOsTaken", 0x101E3, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_wasConfused()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.wasConfused", 0x101E5, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_enemyBecameConfused()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.enemyBecameConfused", 0x101E7, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_wasParalyzed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.wasParalyzed", 0x101E9, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_enemyWasParalyzed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.enemyWasParalyzed", 0x101EB, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_wasBurned()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.wasBurned", 0x101ED, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_enemyWasBurned()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.enemyWasBurned", 0x101EF, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_wasFrozen()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.wasFrozen", 0x101F1, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_enemyWasFrozen()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.enemyWasFrozen", 0x101F3, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_wasPoisoned()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.wasPoisoned", 0x101F5, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_enemyWasPoisoned()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.enemyWasPoisoned", 0x101F7, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_wasPoisonedBadly()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.wasPoisonedBadly", 0x101F9, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_enemyWasPoisonedBadly()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.enemyWasPoisonedBadly", 0x101FB, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_fellAsleep()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.fellAsleep", 0x101FD, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_enemyFellAsleep()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.enemyFellAsleep", 0x101FF, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_playerTurnsConfused()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.playerTurnsConfused", 0x10201, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_playerTurnsConfusedHitSelf()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.playerTurnsConfusedHitSelf", 0x10203, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_playerTurnsParalyzed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.playerTurnsParalyzed", 0x10205, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_playerTurnsParalyzedFully()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.playerTurnsParalyzedFully", 0x10207, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_enemyTurnsConfused()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.enemyTurnsConfused", 0x10209, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_enemyTurnsConfusedHitSelf()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.enemyTurnsConfusedHitSelf", 0x1020B, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_enemyTurnsParalyzed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.enemyTurnsParalyzed", 0x1020D, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_status_enemyTurnsParalyzedFully()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.status.enemyTurnsParalyzedFully", 0x1020F, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_heals_playerHPHealed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.heals.playerHPHealed", 0x10211, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_heals_enemyHPHealed()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.heals.enemyHPHealed", 0x10215, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_playerPokemonFainted()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.playerPokemonFainted", 0x10219, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_enemyPokemonFainted()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.enemyPokemonFainted", 0x1021B, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_experienceGained()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.experienceGained", 0x1021D, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_battle_info_switchouts()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.battle_info.switchouts", 0x10221, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_money_moneyMade()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.money.moneyMade", 0x1022D, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_money_moneySpent()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.money.moneySpent", 0x10231, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_money_moneyLost()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.money.moneyLost", 0x10235, [0, 0, 0, 0], 0);
    }

    [TestMethod]
    public async Task patch_items_itemsPickedUp()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.items.itemsPickedUp", 0x10239, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_items_itemsBought()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.items.itemsBought", 0x1023B, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_items_itemsSold()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.items.itemsSold", 0x1023D, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_catching_ballsThrown()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.catching.ballsThrown", 0x10241, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_catching_pokemonCaughtInBalls()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.catching.pokemonCaughtInBalls", 0x10243, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_catching_numPokemaniacsFought()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.catching.numPokemaniacsFought", 0x10245, [0, 0], 0);
    }

    [TestMethod]
    public async Task patch_movesLearnt()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("patch.movesLearnt", 0x1023F, [0, 0], 0);
    }

    [TestMethod]
    public async Task meta_generation()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("meta.generation", "2");
    }

    [TestMethod]
    public async Task meta_gameName()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("meta.gameName", "Crystal");
    }

    [TestMethod]
    public async Task meta_gameType()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("meta.gameType", "Third Version");
    }

    [TestMethod]
    public async Task meta_mapperType()
    {
        await Load_GBC_PokemonCrystal(2);

        var mapper = await GameHookClient.GetMapperAsync();
    
        mapper.AssertAreEqual("meta.mapperType", "Deprecated");
    }
